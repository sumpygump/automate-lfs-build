#!/bin/bash

#----------------------------------------------------------------------------#
#  __    _____ _____
# |  |  |   __|   __|
# |  |__|   __|__   |
# |_____|__|  |_____|
#
# Automate LFS Build
#----------------------------------------------------------------------------#
# (C) 2019-2022 Ranjith Gowda, Jansen Price
# https://github.com/ranjithum/automate-lfs-build
#----------------------------------------------------------------------------#
# Usage: ./04-chroot-toolchain
# This script will enter chroot environment and build additional temporary
# tools
#----------------------------------------------------------------------------#

REPO_ROOT=$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)
PACKAGES=$(ls $REPO_ROOT/toolchain_chroot)

source $REPO_ROOT/common/common_utils
source $REPO_ROOT/common/common_source
source $REPO_ROOT/common/common_chrooted

assert_is_root()
{
    if [ "$EUID" -ne 0 ]; then
        fatal "Please run as root user. (Use \`sudo su - root\`)"
    fi

    if [ -z "$LFS" ]; then
        fatal "Environment variable LFS is not set!"
    fi
}

update_ownership()
{
    printf "Updating ownership of build directories ..."
    chown -R root:root $LFS/{usr,lib,var,etc,bin,sbin,tools}
    case $(uname -m) in
        x86_64) chown -R root:root $LFS/lib64 ;;
    esac
    echo "done"
}

prepare_vkfs()
{
    printf "Preparing vkfs ..."
    {
    # Create initial device nodes
    mkdir -pv "$LFS"/{dev,proc,sys,run} &&
    mknod -m 600 "$LFS"/dev/console c 5 1 &&
    mknod -m 666 "$LFS"/dev/null c 1 3
    } >/dev/null 2>&1
    echo "done"
}

build_toolchain_under_chroot()
{
    mount_psudoroot

    echo "Entering chroot"
    chroot "$LFS" /usr/bin/env -i \
    HOME=/root                    \
    TERM="$TERM"                  \
    PS1='(lfs chroot) \u:\w\$ '   \
    PATH=/usr/bin:/usr/sbin       \
    PACKAGES="$PACKAGES"          \
    IS_CHROOT="1"                 \
    /bin/bash --login +h <<"EOM"
    if [ ! -d "/automate-lfs-build" ]; then
        echo "Cannot read automate-lfs-build dir"
        exit 1
    fi
    source /automate-lfs-build/common/common_chrooted
    create_fhs_directories
    create_essential_files_and_symlinks
    cd /automate-lfs-build
    for package in $PACKAGES
    do
        info "BEGIN $package - $(date -uR)"
        /bin/bash toolchain_chroot/$package
        if [ $? -ne 0 ]; then
            fatal "Execution of $package failed"
        fi
    done
    cleanup_toolchain
    info "END - $(date -uR)"
EOM

    umount_psudoroot
}

download_source_file()
{
    local url=$1
    local filename=$2
    local _filename=$(basename $1)

    if [ ! -f "$SRCDIR/$filename" ] && [ ! -f "$SRCDIR/$_filename" ]; then
        default_fetch "$url"
        if [ $? -ne 0 ]; then
            error "Problem downloading $url"
        fi
    else
        printf "."
    fi
}

prefetch_packages()
{
    # We need a way to fetch the source code or make sure the source code is
    # already there for the defined packages the user wants to install. We do
    # this by including the packages/<package> file for each package, but don't
    # execute them but just extract the variables and functions from those
    # files and then we can use that to check the files or download them

    # Directory to traverse with package/script files
    DIR=$1
    printf "Prefetching source code for packages "
    {
    source ./common/pkgversion # Get defined versions of packages
    source ./common/common_source

    for package in $PACKAGES
    do
        # This will source the file but take off the shebang (first line)
        # And strip out the 'common_source' and 'common_exec' statements
        # So we are just left with the definitions of vars and functions
        source <(cat $DIR/$package | tail -n+2 | grep -v 'common_')

        if type provide_source_urls >/dev/null 2>&1; then
            # This package has multiple required source file so download all of them
            urls=$(provide_source_urls)
            for url in $urls; do
                download_source_file $url $(basename $url)
            done
        else
            # Download just the single source file for this package
            download_source_file $FETCH_URL $TARFILE
        fi
        unset -f provide_source_urls
    done
    }
    echo "done"
}

# -----------------
# Main
# -----------------
assert_is_root
echo "----------- LFS CHROOT TOOLCHAIN ----------"
echo "This script will create a chroot environment"
echo "And attempt to build additional temp tools"
echo "Sources are downloaded to $SRCDIR"
echo "Logs are in $LOGPATH"
echo "Completed steps are written to $FILE_DB"
echo "Toolchain packages: $(echo $PACKAGES | wc -w)"
echo "-------------------------------------------"

update_ownership
prefetch_packages toolchain_chroot
prepare_vkfs
build_toolchain_under_chroot

echo "-------------------------------------------"
