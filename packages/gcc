#!/bin/bash

source "$(dirname "$0")"/../common/common_source

NAME=gcc
VERSION=${GCC_VER}
TARFILE=$NAME-$VERSION.tar.xz
FETCH_URL="http://ftp.gnu.org/gnu/gcc/gcc-8.2.0/$TARFILE"
SBUx10=920

patchup()
{
    cd "$TMP"/"$NAME"-"$VERSION"
    case $(uname -m) in
    x86_64)
        sed -e '/m64=/s/lib64/lib/' \
            -i.orig gcc/config/i386/t-linux64
    ;;
    esac
    rm -f /usr/lib/gcc
}

configure()
{
    cd "$TMP"/"$NAME"-"$VERSION"
    mkdir build; cd build; BUILD_PATH=$(pwd)

    ../configure --prefix=/usr \
        --enable-languages=c,c++ \
        --disable-multilib \
        --disable-bootstrap \
        --disable-libmpx \
        --with-system-zlib >>"$LOGFILE" 2>&1
}

post_install()
{
    {
    ln -sv ../usr/bin/cpp /lib; ln -sv gcc /usr/bin/cc
    install -v -dm755 /usr/lib/bfd-plugins
    ln -sfv ../../libexec/gcc/$(gcc -dumpmachine)/8.2.0/liblto_plugin.so         /usr/lib/bfd-plugins/
    mkdir -pv /usr/share/gdb/auto-load/usr/lib; mv -v /usr/lib/*gdb.py /usr/share/gdb/auto-load/usr/lib
    } >>"$LOGFILE" 2>&1
}

test_build()
{
    {
    echo 'int main(){}' > dummy.c
    cc dummy.c -v -Wl,--verbose &> dummy.log
    if ! readelf -l a.out | grep ': /lib'; then
        return 1
    fi

    if ! grep -o '/usr/lib.*/crt[1in].*succeeded' dummy.log; then
        return 1
    fi

    if ! grep -B1 '^ /usr/include' dummy.log; then
        return 1
    fi

    grep 'SEARCH.*/usr/lib' dummy.log |sed 's|; |\n|g'

    if ! grep "/lib.*/libc.so.6 " dummy.log; then
        return 1
    fi

    if ! grep found dummy.log; then
        return 1
    fi

    rm -v dummy.c a.out dummy.log
    }  >>"$LOGFILE" 2>&1

}

source "$(dirname "$0")"/../common/common_exec
