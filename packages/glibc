#!/bin/bash

source "$(dirname "$0")"/../common/common_source

NAME=glibc
VERSION=${GLIBC_VER}
TARFILE=$NAME-$VERSION.tar.xz
FETCH_URL="http://ftp.gnu.org/gnu/glibc/$TARFILE"
FETCH_PATCH="https://www.linuxfromscratch.org/patches/downloads/glibc/glibc-2.29-fhs-1.patch"
FETCH_TZDATA="https://www.iana.org/time-zones/repository/releases/tzdata2018i.tar.gz"
SBUx10=220

provide_source_urls() {
    echo $FETCH_URL $FETCH_PATCH $FETCH_TZDATA
    return 0
}

fetch()
{
    warn_if_missing $FETCH_URL $TARFILE
    warn_if_missing $FETCH_PATCH $(basename $FETCH_PATCH)
    warn_if_missing $FETCH_TZDATA $(basename $FETCH_TZDATA)
}

extract()
{
    default_extract "${SRCDIR}"/"$TARFILE"
    [ $? -ne 0 ] && return $?

    cd "$TMP"/"$NAME"-"$VERSION"
    mkdir tzdata
    tar -xf "${SRCDIR}"/tzdata2018i.tar.gz -C tzdata
}

patchup()
{
    cd "$TMP"/"$NAME"-"$VERSION"
    patch -Np1 -i "${SRCDIR}"/glibc-2.29-fhs-1.patch >>"$LOGFILE" 2>&1
}

pre_configure()
{
    {
    ln -sfv /tools/lib/gcc /usr/lib

    case $(uname -m) in
    i?86)    GCC_INCDIR=/usr/lib/gcc/$(uname -m)-pc-linux-gnu/8.2.0/include
            ln -sfv ld-linux.so.2 /lib/ld-lsb.so.3
    ;;
    x86_64) GCC_INCDIR=/usr/lib/gcc/x86_64-pc-linux-gnu/8.2.0/include
            ln -sfv ../lib/ld-linux-x86-64.so.2 /lib64
            ln -sfv ../lib/ld-linux-x86-64.so.2 /lib64/ld-lsb-x86-64.so.3
    ;;
    esac

    rm -f /usr/include/limits.h
    } >>"$LOGFILE" 2>&1
}

configure()
{
    cd "$TMP"/"$NAME"-"$VERSION"
    mkdir build
    cd build
    BUILD_PATH=$(pwd)
    CC="gcc -isystem $GCC_INCDIR -isystem /usr/include" \
    ../configure --prefix=/usr                          \
        --disable-werror --enable-kernel=3.2            \
        --enable-stack-protector=strong                 \
        libc_cv_slibdir=/lib  >>"$LOGFILE" 2>&1
    ret_val=$?
    unset GCC_INCDIR
    return $ret_val
}

post_build()
{
    cd "$BUILD_PATH"
    touch /etc/ld.so.conf
    sed '/test-installation/s@$(PERL)@echo not running@' -i Makefile
}

build_install()
{
    cd "$BUILD_PATH"
    make "$SILENT_MAKE" "$MAKE_JOBS" -ik install >>"$LOGFILE" 2>&1
}

post_install()
{
    cd "$TMP"/"$NAME"-"$VERSION"
    {
    cp -v ./nscd/nscd.conf /etc/nscd.conf
    mkdir -pv /var/cache/nscd
    mkdir -pv /usr/lib/locale
    localedef -i POSIX -f UTF-8 C.UTF-8 2> /dev/null || true && 
    localedef -i cs_CZ -f UTF-8 cs_CZ.UTF-8 &&
    localedef -i de_DE -f ISO-8859-1 de_DE && 
    localedef -i de_DE@euro -f ISO-8859-15 de_DE@euro &&
    localedef -i de_DE -f UTF-8 de_DE.UTF-8 &&
    localedef -i el_GR -f ISO-8859-7 el_GR &&
    localedef -i en_GB -f UTF-8 en_GB.UTF-8 &&
    localedef -i en_HK -f ISO-8859-1 en_HK &&
    localedef -i en_PH -f ISO-8859-1 en_PH &&
    localedef -i en_US -f ISO-8859-1 en_US &&
    localedef -i en_US -f UTF-8 en_US.UTF-8 &&
    localedef -i es_MX -f ISO-8859-1 es_MX &&
    localedef -i fa_IR -f UTF-8 fa_IR &&
    localedef -i fr_FR -f ISO-8859-1 fr_FR &&
    localedef -i fr_FR@euro -f ISO-8859-15 fr_FR@euro &&
    localedef -i fr_FR -f UTF-8 fr_FR.UTF-8 &&
    localedef -i it_IT -f ISO-8859-1 it_IT &&
    localedef -i it_IT -f UTF-8 it_IT.UTF-8 &&
    localedef -i ja_JP -f EUC-JP ja_JP &&
    localedef -i ja_JP -f SHIFT_JIS ja_JP.SIJS 2> /dev/null || true &&
    localedef -i ja_JP -f UTF-8 ja_JP.UTF-8 &&
    localedef -i ru_RU -f KOI8-R ru_RU.KOI8-R && 
    localedef -i ru_RU -f UTF-8 ru_RU.UTF-8 && 
    localedef -i tr_TR -f UTF-8 tr_TR.UTF-8 &&
    localedef -i zh_CN -f GB18030 zh_CN.GB18030 &&
    localedef -i zh_HK -f BIG5-HKSCS zh_HK.BIG5-HKSCS

    make "$SILENT_MAKE" "$MAKE_JOBS" -ik localedata/install-locales

    cat > /etc/nsswitch.conf << "EOF"
    # Begin /etc/nsswitch.conf

    passwd: files
    group: files
    shadow: files

    hosts: files dns
    networks: files

    protocols: files
    services: files
    ethers: files
    rpc: files

    # End /etc/nsswitch.conf
EOF

    cd tzdata
    ZONEINFO=/usr/share/zoneinfo
    mkdir -pv $ZONEINFO/{posix,right}
    for tz in etcetera southamerica northamerica europe africa antarctica  \
        asia australasia backward pacificnew systemv
    do
        zic -L /dev/null   -d $ZONEINFO       ${tz}
        zic -L /dev/null   -d $ZONEINFO/posix ${tz}
        zic -L leapseconds -d $ZONEINFO/right ${tz}
    done

    cp -v zone.tab zone1970.tab iso3166.tab $ZONEINFO &&
        zic -d $ZONEINFO -p America/New_York &&
    unset ZONEINFO
    ln -svf /usr/share/zoneinfo/UTC /etc/localtime
    cd -

    cat > /etc/ld.so.conf << "EOF"
    # Begin /etc/ld.so.conf
    /usr/local/lib
    /opt/lib

    # Add an include directory
    include /etc/ld.so.conf.d/*.conf
EOF

    mkdir -pv /etc/ld.so.conf.d
    mv -v /tools/bin/{ld,ld-old}
    mv -v /tools/$(uname -m)-pc-LINUX-gnu/bin/{ld,ld-old} 
    mv -v /tools/bin/{ld-new,ld} 
    ln -sv /tools/bin/ld /tools/$(uname -m)-pc-linux-gnu/bin/ld

    gcc -dumpspecs | sed -e 's@/tools@@g'                   \
        -e '/\*startfile_prefix_spec:/{n;s@.*@/usr/lib/ @}' \
        -e '/\*cpp:/{n;s@$@ -isystem /usr/include@}' >      \
        `dirname $(gcc --print-libgcc-file-name)`/specs

    } >>"$LOGFILE" 2>&1
}

test_build()
{
    {
    echo 'int main(){}' > dummy.c
    cc dummy.c -v -Wl,--verbose &> dummy.log
    if ! readelf -l a.out | grep ': /lib'; then
        return 1
    fi

    if ! grep -o '/usr/lib.*/crt[1in].*succeeded' dummy.log; then
        return 1
    fi

    if ! grep -B1 '^ /usr/include' dummy.log; then
        return 1
    fi

    grep 'SEARCH.*/usr/lib' dummy.log |sed 's|; |\n|g'

    if ! grep "/lib.*/libc.so.6 " dummy.log; then
        return 1
    fi

    if ! grep found dummy.log; then
        return 1
    fi

    rm -v dummy.c a.out dummy.log
    }  >>"$LOGFILE" 2>&1
}

source "$(dirname "$0")"/../common/common_exec
