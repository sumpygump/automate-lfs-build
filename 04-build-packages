#!/bin/bash

if [ -z "$LFS" ]; then
    echo "Env LFS not present"
    exit 1
fi

if [ "$(id -u)" != 0 ]; then
    echo "$0 script need to run as root!"
    exit 1
fi

chown -R root:root "$LFS"/tools "$LFS"/lfs-source "$LFS"/automate-lfs-build

mount_psudoroot()
{
    {
    mount -v --bind /dev "$LFS"/dev &&
    mount -vt devpts devpts "$LFS"/dev/pts -o gid=5,mode=620 &&
    mount -vt proc proc "$LFS"/proc &&
    mount -vt sysfs sysfs "$LFS"/sys &&
    mount -vt tmpfs tmpfs "$LFS"/run
    
    if [ -h "$LFS"/dev/shm ]; then
        mkdir -pv "$LFS"/$(readlink "$LFS"/dev/shm)
    fi
    } >/dev/null 2>&1
}

umount_psudoroot()
{
    {
        umount -v "$LFS"/dev/pts
        umount -v "$LFS"/dev
        umount -v "$LFS"/run
        umount -v "$LFS"/proc
        umount -v "$LFS"/sys
    } >/dev/null 2>&1
}

prepare_vkfs()
{
    {
    mkdir -pv "$LFS"/{dev,proc,sys,run} &&
    mknod -m 600 "$LFS"/dev/console c 5 1 && 
    mknod -m 666 "$LFS"/dev/null c 1 3
    } >/dev/null 2>&1
    mount_psudoroot
}

prepare_vkfs_under_chroot()
{
    {
    chroot "$LFS" /tools/bin/env -i \
    HOME=/root                  \
    TERM="$TERM"                \
    PS1='(lfs chroot) \u:\w\$ ' \
    PATH=/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin \
    /tools/bin/bash <<"EOM"

    mkdir -pv /{bin,boot,etc/{opt,sysconfig},home,lib/firmware,mnt,opt} &&
    mkdir -pv /{media/{floppy,cdrom},sbin,srv,var} &&
    install -dv -m 0750 /root &&
    install -dv -m 1777 /tmp /var/tmp &&
    mkdir -pv /usr/{,local/}{bin,include,lib,sbin,src} &&
    mkdir -pv /usr/{,local/}share/{color,dict,doc,info,locale,man} &&
    mkdir -v  /usr/{,local/}share/{misc,terminfo,zoneinfo} &&
    mkdir -v  /usr/libexec &&
    mkdir -pv /usr/{,local/}share/man/man{1..8}

    case $(uname -m) in
    x86_64) mkdir -v /lib64 ;;
    esac

    mkdir -v /var/{log,mail,spool} &&
    ln -sv /run /var/run &&
    ln -sv /run/lock /var/lock &&
    mkdir -pv /var/{opt,cache,lib/{color,misc,locate},local}

    ln -sv /tools/bin/{bash,cat,chmod,dd,echo,ln,mkdir,pwd,rm,stty,touch} /bin &&
    ln -sv /tools/bin/{env,install,perl,printf}         /usr/bin &&
    ln -sv /tools/lib/libgcc_s.so{,.1}                  /usr/lib &&
    ln -sv /tools/lib/libstdc++.{a,so{,.6}}             /usr/lib

    install -vdm755 /usr/lib/pkgconfig
    ln -sv bash /bin/sh &&
    ln -sv /proc/self/mounts /etc/mtab

    cat > /etc/passwd <<"EOF"
    root:x:0:0:root:/root:/bin/bash
    bin:x:1:1:bin:/dev/null:/bin/false
    daemon:x:6:6:Daemon User:/dev/null:/bin/false
    messagebus:x:18:18:D-Bus Message Daemon User:/var/run/dbus:/bin/false
    nobody:x:99:99:Unprivileged User:/dev/null:/bin/false
EOF

    cat > /etc/group <<"EOF"
    root:x:0:
    bin:x:1:daemon
    sys:x:2:
    kmem:x:3:
    tape:x:4:
    tty:x:5:
    daemon:x:6:
    floppy:x:7:
    disk:x:8:
    lp:x:9:
    dialout:x:10:
    audio:x:11:
    video:x:12:
    utmp:x:13:
    usb:x:14:
    cdrom:x:15:
    adm:x:16:
    messagebus:x:18:
    input:x:24:
    mail:x:34:
    kvm:x:61:
    wheel:x:97:
    nogroup:x:99:
    users:x:999:
EOF

    touch /var/log/{btmp,lastlog,faillog,wtmp} &&
    chgrp -v utmp /var/log/lastlog &&
    chmod -v 664  /var/log/lastlog &&
    chmod -v 600  /var/log/btmp

EOM
    } >/dev/null 2>&1
}

if [ -z "$BIG_LINUX" ]; then
    PACKAGES="glibc flex zlib elfutils busybox openssl grub pkg-config e2fsprogs linux-kernel"
else
    PACKAGES="linux-header man-pages glibc zlib file readline m4 bc     \
        binutils gmp mpfr mpc shadow gcc bzip2 pkg-config ncurses       \
        attr acl libcap sed psmisc iana-etc bison flex grep bash        \
        libtool gdbm gperf expact inetutils perl xmlparser intltool     \
        autoconf automake xz kmod gettext elfutils libffi openssl       \
        python ninja meson coreutils check diffutils gawk findutils     \
        groff grub less gzip iproute kbd libpipeline make patch man-db  \
        tar texinfo vim procps-ng util-linux e2fsprogs sysklogd sysvinit eudev linux-kernel"
fi

build_packages_under_chroot()
{
    mount_psudoroot
    chroot "$LFS" /tools/bin/env -i                 \
    HOME=/root                                      \
    TERM="$TERM"                                    \
    PS1='(lfs chroot) \u:\w\$ '                     \
    PATH=/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin   \
    PACKAGES="$PACKAGES"                            \
    /tools/bin/bash <<"EOM"

    cd /automate-lfs-build/
    for package in $PACKAGES
    do
        echo "Building $package start - $(date)"
        sh packages/$package
        if [ $? -ne 0 ]; then
            echo "Building $script failed.. exiting"
            exit 1
        fi
        echo "Building $package complete - $(date)"
    done
EOM
    umount_psudoroot
}

strip_packages()
{
    {
        save_lib="ld-2.29.so libc-2.29.so libpthread-2.29.so libthread_db-1.0.so"
        cd $LFS/lib
        for LIB in $save_lib
        do
	    objcopy --only-keep-debug $LIB $LIB.dbg
	    strip --strip-unneeded $LIB
	    objcopy --add-gnu-debuglink=$LIB.dbg $LIB
        done

        save_usrlib="libquadmath.so.0.0.0 libstdc++.so.6.0.25 libitm.so.1.0.0 libatomic.so.1.2.0"
        cd $LFS/usr/lib
        for LIB in $save_usrlib
        do
            objcopy --only-keep-debug $LIB $LIB.dbg
            strip --strip-unneeded $LIB
            objcopy --add-gnu-debuglink=$LIB.dbg $LIB
        done

        unset LIB save_lib save_usrlib
        cd $LFS

        $LFS/tools/bin/find $LFS/usr/lib -type f -name \*.a \
            -exec /tools/bin/strip --strip-debug {} ';'

        $LFS/tools/bin/find /lib $LFS/usr/lib -type f \( -name \*.so* -a ! -name \*dbg \) \
            -exec /tools/bin/strip --strip-unneeded {} ';'

        $LFS/tools/bin/find $LFS/{bin,sbin} $LFS/usr/{bin,sbin,libexec} -type f \
            -exec /tools/bin/strip --strip-all {} ';'
    } >/dev/null 2>&1
}


prepare_vkfs
prepare_vkfs_under_chroot
build_packages_under_chroot
strip_packages
