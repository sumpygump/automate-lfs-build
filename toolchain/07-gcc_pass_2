#!/bin/bash

. "$(dirname "$0")"/../common/common_source
NAME=gcc
VERSION=${GCC_VER}
FETCH_URL="http://ftp.gnu.org/gnu/gcc/gcc-8.2.0/$NAME-$VERSION.tar.xz"
FETCH_MPFR="http://www.mpfr.org/mpfr-4.0.2/mpfr-${MPFR_VER}.tar.xz"
FETCH_GMP="http://ftp.gnu.org/gnu/gmp/gmp-${GMP_VER}.tar.xz"
FETCH_MPC="https://ftp.gnu.org/gnu/mpc/mpc-${MPC_VER}.tar.gz"
TARFILE=$NAME-$VERSION.tar.xz
mSBU=14000

fetch()
{
    if [ ! -f "${SRCDIR}"/"$TARFILE" ]; then
        default_fetch "$FETCH_URL"
        [ $? -ne 0 ] && return $?
    fi

    if [ ! -f "${SRCDIR}"/mpfr-"${MPFR_VER}".tar.xz ]; then
        default_fetch "$FETCH_MPFR"
        [ $? -ne 0 ] && return $?
    fi

    if [ ! -f "${SRCDIR}"/gmp-"${GMP_VER}".tar.xz ]; then
        default_fetch "$FETCH_GMP"
        [ $? -ne 0 ] && return $?
    fi

    if [ ! -f "${SRCDIR}"/mpc-"${MPC_VER}".tar.gz ]; then
        default_fetch "$FETCH_MPC"
        [ $? -ne 0 ] && return $?
    fi

    return 0
}

extract()
{
    default_extract "${SRCDIR}"/"$TARFILE"
    [ $? -ne 0 ] && return $?

    default_extract "${SRCDIR}"/mpfr-"${MPFR_VER}".tar.xz
    [ $? -ne 0 ] && return $?

    default_extract "${SRCDIR}"/gmp-"${GMP_VER}".tar.xz
    [ $? -ne 0 ] && return $?

    default_extract "${SRCDIR}"/mpc-"${MPC_VER}".tar.gz
    [ $? -ne 0 ] && return $?

    return 0
}

patchup()
{
    {
    cd "${TMP}"/"${NAME}"-"${VERSION}"
    mv "${TMP}"/mpfr-"${MPFR_VER}" ./mpfr &&
    mv "${TMP}"/gmp-"${GMP_VER}" ./gmp &&
    mv "${TMP}"/mpc-"${MPC_VER}" ./mpc

    cat gcc/limitx.h gcc/glimits.h gcc/limity.h > \
        "$(dirname "$("$LFS_TGT"-gcc -print-libgcc-file-name)")"/include-fixed/limits.h

    for file in gcc/config/{linux,i386/linux{,64}}.h
    do
    cp -uv $file{,.orig}
    sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&@g' \
        -e 's@/usr@/tools@g' $file.orig > $file
    echo '
    #undef STANDARD_STARTFILE_PREFIX_1
    #undef STANDARD_STARTFILE_PREFIX_2
    #define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
    #define STANDARD_STARTFILE_PREFIX_2 ""' >> $file
    touch $file.orig
    done

    case $(uname -m) in
        x86_64)
                sed -e '/m64=/s/lib64/lib/' \
        -i.orig gcc/config/i386/t-linux64
        ;;
    esac

    } >>"$LOGFILE" 2>&1
}

configure()
{
    cd "$TMP"/"$NAME"-"$VERSION"
    mkdir build
    cd build

    BUILD_PATH=$(pwd)
    CC=$LFS_TGT-gcc                                     \
    CXX=$LFS_TGT-g++                                    \
    AR=$LFS_TGT-ar                                      \
    RANLIB=$LFS_TGT-ranlib                              \
    ../configure                                        \
        --prefix=/tools                                 \
        --with-local-prefix=/tools                      \
        --with-native-system-header-dir=/tools/include  \
        --enable-languages=c,c++                        \
        --disable-libstdcxx-pch                         \
        --disable-multilib                              \
        --disable-bootstrap                             \
        --disable-libgomp >>"$LOGFILE" 2>&1
}

post_install()
{
    ln -sv gcc /tools/bin/cc >>"$LOGFILE" 2>&1
}

test_build()
{
    echo 'int main(){}' > dummy.c
    $LFS_TGT-gcc dummy.c

    if ! readelf -l a.out | grep ': /tools' >/dev/null 2>&1; then
        return 1
    fi
    rm -rf a.out dummy.c
    return 0
}

. "$(dirname "$0")"/../common/common_exec
