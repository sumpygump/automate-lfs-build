#!/bin/bash

ME=$(basename "$0")
SRCDIR="/lfs-source"
TMP="$LFS/tmp/build"
LOGPATH="$LFS/tmp/log"
LOGFILE="${LOGPATH}/${ME}.log"
FILE_DB="${LOGPATH}/file_db.txt"
RATES_DB="$LFS/tmp/rate_history.txt"
SILENT_MAKE="-s"
JOBS=${JOBS:-$(($(nproc) * 4))}
MAKE_JOBS="-j$JOBS"
BUILD_PATH=

ABS_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)
. $ABS_DIR/pkgversion

[ ! -d "$TMP" ] && mkdir -p "$TMP"
[ ! -d "$LOGPATH" ] && mkdir -p "$LOGPATH"
[ ! -d "$SRCDIR" ] && mkdir -p "$SRCDIR"

[ -f "$LOGFILE" ] && rm -rf "$LOGFILE"

log()
{
    echo "$1" >>"$LOGFILE"
}

echo_log()
{
    echo "$1" | tee -a "$LOGFILE"
}

default_extract()
{
    local EXTRACT_DIR=$TMP
    echo_log "Extracting $1 to $EXTRACT_DIR/"
    tar -xf "$1" -C "$EXTRACT_DIR"
}

default_fetch()
{
    local DEST_DIR=$SRCDIR
    log "Downloading $1"
    printf "Downloading $1 ..."
    wget --quiet --directory-prefix="$DEST_DIR" "$1"
    if [ $? -ne 0 ]; then return 1; fi
    echo "done."
}

default_fetch_chroot()
{
    # wget is not available in chroot so warn if missing
    warn_if_missing $FETCH_URL $TARFILE
}

warn_if_missing()
{
    local url=$1
    local filename=$2

    if [ ! -f "${SRCDIR}"/"$filename" ]; then
        echo "Package $NAME source code is not available.. Please download it manually and place it inside /lfs-source folder"
        echo $url
        return 1
    fi
}

default_configure()
{
    cd "$1"
    mkdir build; cd build; BUILD_PATH=$(pwd)
    ../configure --prefix=/tools >>"$LOGFILE" 2>&1
}

default_configure_chroot()
{
    cd "$1"
    mkdir build
    cd build
    BUILD_PATH=$(pwd)

    ../configure --prefix=/usr >>"$LOGFILE" 2>&1
}

default_cleanup()
{
    log "Removing $1"
    rm -rf "$1"
}

add_to_filedb()
{
    echo "$ME" >> "$FILE_DB"
}

save_rate_history()
{
    if [ "$SBU_RATE" -gt "0" ]; then
        printf "%-20s %-12s %-10s %5s %5s %4s\n" \
            $ME $NAME $VERSION $mSBU $SECONDS $SBU_RATE >> $RATES_DB
    fi
}

show_rate_history()
{
    printf "%-20s %-12s %-10s %5s %5s %4s\n" Script Package Version mSBU sec rate
    printf "%-20s %-12s %-10s %5s %5s %4s\n" ------ ------- ------- ---- --- ----
    cat $RATES_DB
}

print_completion_estimation()
{
    if [ -z "$1" ]; then
        return 0
    fi

    SBU_RATE=0
    if [ -s "$RATES_DB" ]; then
        # Calculate the average rate based on list of rates
        SBU_RATE=$(awk '{ total += $6; count++ } END { printf "%.0f", total/count }' "$RATES_DB")
    fi

    if [ "$SBU_RATE" -gt "0" ]; then
        #est=$(($SBU_RATE*$1/10))
        est=$(($1/$SBU_RATE))
        if [ "$est" -ge "60" ]; then
            est_min=$(($est/60))
            echo "Estimated completion in $est_min minutes ($est seconds)"
        else
            echo "Estimated completion in $est seconds"
        fi
    fi
}

clear_env()
{
    ME=
    LOGFILE=
    BUILD_PATH=
    NAME=
    VERSION=
    FETCH_URL=
}

zdate()
{
    date --utc -R
}
